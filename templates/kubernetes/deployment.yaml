---

apiVersion: v1
kind: ConfigMap
metadata:
  name: multiomix-aws-emr-conf
  namespace: {your-namespace}
data:
  default.conf: |
    # Cache settings
    proxy_cache_path /usr/share/nginx/cache levels=1:2 keys_zone=my_cache:10m max_size=2g inactive=60m use_temp_path=off;

    # Connection with Django server
    upstream web {
    ip_hash;
    server localhost:8000;
    }

    server {
        client_max_body_size 0;
        proxy_read_timeout 3600;
        proxy_connect_timeout 3600;
        proxy_send_timeout 3600;

        # Main proxy
        location / {
            proxy_pass http://web/;
        } 

        # Listening port and server name
        listen 8080;
        server_name localhost;

        # GZIP settings
        gzip on;
        gzip_proxied any;
        gzip_min_length 256;
        gzip_types
            text/css
            text/javascript
            text/xml
            text/plain
            application/javascript
            application/x-javascript
            application/json
            application/vnd.ms-fontobject
            application/x-font-ttf
            font/opentype
            image/svg+xml
            image/x-icon;
    }
    
---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: multiomix-aws-emr
  name: multiomix-aws-emr
  namespace: {your-namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: multiomix-aws-emr
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: multiomix-aws-emr
    spec:
      volumes:
      - name: config
        configMap: 
          name: multiomix-aws-emr-conf
          items:
          - key: "default.conf"
            path: "default.conf"    
      containers:
      - image: omicsdatascience/multiomix-aws-emr:0.1.10
        name: multiomix-aws-emr
        command: ["gunicorn"]
        args: ["--bind", "localhost:8000", "app:app", "--timeout", "30"]
        env:       
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {your-secret-object}
              key: {your-access-key-secret-key-reference}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {your-secret-object}
              key: {your-private-access-key-secret-key-reference}
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        - name: EMR_S3_BUCKET
          value: {your-s3-bucket-name}
        - name: EMR_VIRTUAL_CLUSTER_ID
          value: {your-emr-virtual-cluser-id}        
        - name: EMR_EXECUTION_ROLE_ARN 
          value: {your-emr-execution-arn}        
        - name: EMR_DRIVER_TEMPLATE 
          value: "pod-template-driver-prod.yaml"          
        - name: EMR_EXECUTOR_TEMPLATE
          value: "pod-template-executor-prod.yaml"
        resources: {}
        imagePullPolicy: IfNotPresent
      - image: nginx:1.19.3
        name: nginx
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
          readOnly: true            
        resources: {}
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 8080 
        startupProbe:
          httpGet:
            path: /
            port: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
        livenessProbe:
          httpGet:
            path: /
            port: 8080             
status: {}

---

apiVersion: v1
kind: Service
metadata:
  name: multiomix-aws-emr
  namespace: {your-namespace}
spec:
  type: NodePort
  selector:
    app: multiomix-aws-emr
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080